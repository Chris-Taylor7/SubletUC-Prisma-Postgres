// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL") // uses a direct connection
}

model User {
  id           Int        @id @default(autoincrement())
  fullName     String?
  username     String     @unique
  email        String     @unique
  isActive     Boolean    @default(true)
  createdBy    String?
  updatedBy    String?
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @updatedAt @map(name: "updated_at")

  // Listings created by the user
  listings     Listing[] 

  // Bookmarked listings (many-to-many)
  favorited    Listing[]  @relation("UserBookmarks")

  @@map(name: "users")
}

model Listing {
  id                       Int        @id @default(autoincrement())
  address                  String?
  rent                     Decimal
  availability             String?
  bedrooms                 Int
  bathrooms                Int
  description              String?
  utilitiesIncludedInRent  Boolean
  averageUtilities         Decimal
  sharedRoom               Boolean
  sharedRoommates          Int
  catsAndDogsAllowed       Boolean
  washerDryer              Boolean
  offStreetParking         Boolean
  driveway                 Boolean
  distanceFromCampus       Decimal
  notes                    String?
  photo                    Bytes?
  active                   Boolean    @default(true)

  // Foreign key to User
  userId                   Int
  user                     User       @relation(fields: [userId], references: [id])

  // Users who bookmarked this listing
  favoritedBy              User[]     @relation("UserBookmarks")

  // Related roommates
  roommates                Roommate[]
}

model Roommate {
  id           Int      @id @default(autoincrement())
  year         Int?
  gender       Gender

  // Foreign key to Listing
  listingId    Int
  listing      Listing  @relation(fields: [listingId], references: [id])
}

enum Gender {
  Male
  Female
  Non_Binary
}